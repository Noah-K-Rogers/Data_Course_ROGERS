colnames(split_df) <- c("send_help","id", "species", "marker", "abundances")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundances = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) %>%
left_join(read.table(list_sh[1],header = TRUE, sep = "\t")%>% clean_names())
performance(better_mod)
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
list_meta <- c(list.files("../Fungi_Data/Metadata/",full.names = TRUE))
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
#first one for testing and initialization
fasta_clean <- function(path){
testing <- readDNAStringSet(path)
final <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
#split the name column into 5 columns
split_data <- strsplit(final$Name, "\\|")
split_df <- as.data.frame(do.call(rbind, split_data))
colnames(split_df) <- c("send_help","id", "species", "marker", "abundances")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundances = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) %>%
left_join(read.table(list_sh[1],header = TRUE, sep = "\t")%>% clean_names())
for (i in 2:length(list_fasta)){
df <- left_join(fasta_clean(list_fasta[i]),read.table(list_meta[i],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) %>%
left_join(read.table(list_sh[i],header = TRUE, sep = "\t") %>% clean_names())
full <- rbind(full,df)
}
warnings()
saveRDS(full,file = "Fungi_df_BAD")
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
list_meta <- c(list.files("../Fungi_Data/Metadata/",full.names = TRUE))
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
#first one for testing and initialization
fasta_clean <- function(path){
testing <- readDNAStringSet(path)
final <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
#split the name column into 5 columns
split_data <- strsplit(final$Name, "\\|")
split_df <- as.data.frame(do.call(rbind, split_data))
colnames(split_df) <- c("send_help","id", "species", "marker", "abundances")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundances = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
full <- right_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) %>%
right_join(read.table(list_sh[1],header = TRUE, sep = "\t")%>% clean_names())
for (i in 2:length(list_fasta)){
df <- right_join(fasta_clean(list_fasta[i]),read.table(list_meta[i],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) %>%
right_join(read.table(list_sh[i],header = TRUE, sep = "\t") %>% clean_names())
full <- rbind(full,df)
}
warnings()
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
list_meta <- c(list.files("../Fungi_Data/Metadata/",full.names = TRUE))
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
#first one for testing and initialization
fasta_clean <- function(path){
testing <- readDNAStringSet(path)
final <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
#split the name column into 5 columns
split_data <- strsplit(final$Name, "\\|")
split_df <- as.data.frame(do.call(rbind, split_data))
colnames(split_df) <- c("send_help","id", "species", "marker", "abundances")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundances = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) %>%
left_join(read.table(list_sh[1],header = TRUE, sep = "\t")%>% clean_names())
for (i in 2:length(list_fasta)){
df <- left_join(fasta_clean(list_fasta[i]),read.table(list_meta[i],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) %>%
left_join(read.table(list_sh[i],header = TRUE, sep = "\t") %>% clean_names())
full <- rbind(full,df)
}
warnings()
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE)
library(tidyverse)
library(easystats)
library(MASS)
df <- better_mod %>% broom::tidy()
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
list_meta <- c(list.files("../Fungi_Data/Metadata/",full.names = TRUE))
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
#first one for testing and initialization
fasta_clean <- function(path){
testing <- readDNAStringSet(path)
final <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
#split the name column into 5 columns
split_data <- strsplit(final$Name, "\\|")
split_df <- as.data.frame(do.call(rbind, split_data))
colnames(split_df) <- c("hash_value","id", "species", "marker", "abundances")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundances = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t"))# %>%
#mutate(marker = target_gene) %>% select(-target_gene)) %>%
#left_join(read.table(list_sh[1],header = TRUE, sep = "\t")%>% clean_names())
for (i in 2:length(list_fasta)){
df <- left_join(fasta_clean(list_fasta[i]),read.table(list_meta[i],header = TRUE, sep = "\t")) #%>%
#mutate(marker = target_gene) %>% select(-target_gene)) %>%
#left_join(read.table(list_sh[i],header = TRUE, sep = "\t") %>% clean_names())
full <- rbind(full,df)
}
warnings()
#FASTA####
#list fasta files
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
#Test with single file
testing <- readDNAStringSet(list_fasta[1])
df <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
final <- df
#add the rest of the files
for (i in list_fasta[2:length(list_fasta)]){
data <- readDNAStringSet(i)
df <- data.frame(
Name = names(data),
Sequence = as.character(data)
)
final <- rbind(final,df)
}
View(full)
View(final)
View(df)
View(final)
#Test with single file
testing <- readDNAStringSet(list_fasta[1])
df <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
View(df)
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
list_meta <- c(list.files("../Fungi_Data/Metadata/",full.names = TRUE))
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
#first one for testing and initialization
fasta_clean <- function(path){
testing <- readDNAStringSet(path)
final <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
#split the name column into 5 columns
split_data <- strsplit(final$Name, "\\|")
split_df <- as.data.frame(do.call(rbind, split_data))
colnames(split_df) <- c("hash_value","id", "species", "marker", "abundances")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundances = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene)) #%>%
library(tidyverse)
library(ShortRead)
install.packages("ShortRead")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ShortRead")
library(tidyverse)
library(ShortRead)
# find files
sh_files <-
list.files("../Fungi_Data/SH/",
full.names = TRUE, pattern = "sh_list.txt$")
fasta_files <-
list.files("../Fungi_Data/Fasta/",
full.names = TRUE, pattern = ".fas$")
metadata_files <-
list.files("../Fungi_Data/Metadata/",
full.names = TRUE, pattern = "_sample_list.txt$")
# tests to make sure same number of files, in same order
sh_names <- sh_files %>% basename() %>% str_remove("_sh_list.txt")
fa_names <- fasta_files %>% basename() %>% str_remove("species_") %>% str_remove("\\.fas")
md_names <- metadata_files %>% basename() %>% str_remove("_sample_list.txt")
length_same <- length(metadata_files) == length(sh_files) & length(metadata_files) == length(fasta_files)
order_same <- identical(sh_names,fa_names) & identical(sh_names, md_names)
# make new list to hold results
species_data_list <- list()
# run tests on file order
if(length_same & order_same){
# for-loop to process all 3 files for each species, if test passes
for(i in seq_along(metadata_files)){
metadata <- read_delim(metadata_files[i])
fasta <- readFasta(fasta_files[i])
SH <- read_delim(sh_files[i])
sample_ids <- fasta@id %>% as.character() %>% str_split("\\|") %>% map_chr(2) %>% str_remove("SampleID_") %>% as.numeric()
markers <- fasta@id %>% as.character() %>% str_split("\\|") %>% map_chr(4)
sequences <- fasta@sread %>% as.character()
# build new vars into dataframe
seq_data <-
data.frame(id=sample_ids,
marker=markers,
sequence=sequences) %>%
mutate(marker = marker %>% str_remove("marker_")) %>%
full_join(SH) # join SH (species hypothesis ID) and taxonomy with metadata and DNA sequence
df <- metadata %>%
full_join(seq_data, by="id", multiple='all') %>%
mutate(pH = as.numeric(pH), # take care to force data types for columns in acse of odd entries
abundances = as.numeric(abundances),
year_of_sampling = as.numeric(year_of_sampling),
MAT = as.numeric(MAT),
MAP = as.numeric(MAP),
latitude = as.numeric(latitude),
longitude = as.numeric(longitude),
primers = as.character(primers),
id = as.character(id))
# assign data frame to list
species_data_list[[i]] <- df %>% as.data.frame()
}
}
#inspect for sanity
species_data_list %>% map("Species") %>% map_chr(unique) # should be all species
#save intermediate file (it's rather large and unwieldy)
saveRDS(species_data_list,"../Fungi_Data/species_data_list.RDS")
# pull them all into one big data frame
df <- purrr::reduce(species_data_list,full_join)
View(df)
path <- list_sh[1]
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
path <- list_sh[1]
df <- read.table(path,header = TRUE, sep = "\t")%>% clean_names()
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
df <- read.table(path,header = TRUE, sep = "\t")%>% clean_names()
df2 <- df %>% select(-accession) %>% unique()
for(i in 1:length(df2)){
df2[i]
}
df <- read.table(path,header = TRUE, sep = "\t")%>% clean_names()
df2 <- df %>% select(-accession) %>% unique()
path <- list_sh[3]
df <- read.table(path,header = TRUE, sep = "\t")%>% clean_names()
df2 <- df %>% select(-accession) %>% unique()
for(i in 1:length(df2)){
df2[i]
}
df2[i,"species"]
species <- df2[i,"species"]
gene <- df2[i,"marker"]
for(i in 1:length(df2)){
species <- df2[i,"species"]
gene <- df2[i,"marker"]
}
for(i in 1:nrow(df2)){
species <- df2[i,"species"]
gene <- df2[i,"marker"]
}
species <- df2[i,"species"]
gene <- df2[i,"marker"]
# Example dataframe
df <- data.frame(
ID = c(1, 1, 2, 2, 3),
Category = c("A", "B", "A", "B", "A"),
Value = c("X", "Y", "Z", "W", "P")
)
result <- df %>%
group_by(ID, Category) %>%  # Grouping by ID and Category
summarise(Combined_Values = paste(Value, collapse = ","))  # Combining the 'Value' column
# Output the result
print(result)
# Example dataframe
df <- data.frame(
ID = c(1, 1, 2, 2, 3,1),
Category = c("A", "B", "A", "B", "A","A"),
Value = c("Hello", "Y", "Z", "W", "P","World")
)
result <- df %>%
group_by(ID, Category) %>%  # Grouping by ID and Category
summarise(Combined_Values = paste(Value, collapse = ","))  # Combining the 'Value' column
# Output the result
print(result)
result <- df %>%
group_by(-accession) %>%
summarise(accession = paste(accession, collapse = ","))
df <- read.table(path,header = TRUE, sep = "\t")%>% clean_names()
result <- df %>%
group_by(-accession) %>%
summarise(accession = paste(accession, collapse = ","))
View(result)
result <- df %>%
group_by(marker, species) %>%
summarise(accession = paste(accession, collapse = ","))
result <- df %>%
group_by(marker, species,genus,family,order,class,phylum,kingdom) %>%
summarise(accession = paste(accession, collapse = ","))
View(result)
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene),by = join_by(id == id, marker==marker)) %>%
left_join(clean_sh(list_sh[1]))
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
list_meta <- c(list.files("../Fungi_Data/Metadata/",full.names = TRUE))
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
#first one for testing and initialization
fasta_clean <- function(path){
testing <- readDNAStringSet(path)
final <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
#split the name column into 5 columns
split_data <- strsplit(final$Name, "\\|")
split_df <- as.data.frame(do.call(rbind, split_data))
colnames(split_df) <- c("hash_value","id", "species", "marker", "abundance")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundance = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
path <- list_sh[3]
clean_sh <- function(path){
df <- read.table(path,header = TRUE, sep = "\t")%>% clean_names()
result <- df %>%
group_by(marker, species,genus,family,order,class,phylum,kingdom) %>%
summarise(accession = paste(accession, collapse = ","))
return(result)
}
?full_join()
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene),by = join_by(id == id, marker==marker)) %>%
left_join(clean_sh(list_sh[1]))
for (i in 2:length(list_fasta)){
df <- left_join(fasta_clean(list_fasta[i]),
read.table(list_meta[i],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene),by = join_by(id == id, marker==marker)) %>%
left_join(clean_sh(list_sh[i]))
full <- rbind(full,df)
}
warnings()
library(janitor)
library(Biostrings)
library(seqinr)
library(tidyverse)
list_fasta <- c(list.files("../Fungi_Data/Fasta", pattern = ".fas",full.names = TRUE))
list_meta <- c(list.files("../Fungi_Data/Metadata/",full.names = TRUE))
list_sh <- c(list.files("../Fungi_Data/SH/",full.names = TRUE))
#first one for testing and initialization
fasta_clean <- function(path){
testing <- readDNAStringSet(path)
final <- data.frame(
Name = names(testing),
Sequence = as.character(testing)
)
#split the name column into 5 columns
split_data <- strsplit(final$Name, "\\|")
split_df <- as.data.frame(do.call(rbind, split_data))
colnames(split_df) <- c("hash_value","id", "species", "marker", "abundance")
final <- cbind(split_df,final$Sequence)
final <- final %>% mutate(sequence = `final$Sequence`) %>% dplyr::select(-`final$Sequence`)
final <- final %>% mutate(id = str_remove(id, "SampleID_") %>% as.numeric()) %>%
mutate(marker = str_remove(marker,"marker_")) %>%
mutate(species = str_remove(species, "species_") %>% str_replace(pattern = "_", replacement = " "))
# Split the bad abundance column into "abundance" and "total"
df_split <- strsplit(final$abundance, "_")
# mutate the data frame with the split values
final <- final %>% mutate(
abundance = as.numeric(sapply(df_split, function(x) x[2])),
abun_total = as.numeric(sapply(df_split, function(x) x[4]))
)
return(final)
}
path <- list_sh[3]
clean_sh <- function(path){
df <- read.table(path,header = TRUE, sep = "\t")%>% clean_names()
result <- df %>%
group_by(marker, species,genus,family,order,class,phylum,kingdom) %>%
summarise(accession = paste(accession, collapse = ","))
return(result)
}
?full_join()
full <- left_join(fasta_clean(list_fasta[1]),
read.table(list_meta[1],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene),by = join_by(id == id, marker==marker)) %>%
left_join(clean_sh(list_sh[1]))
for (i in 2:length(list_fasta)){
df <- left_join(fasta_clean(list_fasta[i]),
read.table(list_meta[i],header = TRUE, sep = "\t") %>%
mutate(marker = target_gene) %>% select(-target_gene),by = join_by(id == id, marker==marker)) %>%
left_join(clean_sh(list_sh[i]))
full <- rbind(full,df)
}
warnings()
View(full)
saveRDS(full,file = "Fungi_df")
pbinom(0,37,(.6*.22))
