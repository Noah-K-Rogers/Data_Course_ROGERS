ls
wd
getwd()
setwd(/home/noah/Desktop/Data_Course_ROGERS)
setwd("/home/noah/Desktop/Data_Course_ROGERS")
getwd()
list.files(path = "./Data", pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
list.files(path = "./Data", pattern = ".csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
csv_files <- c(list.files(path = "./Data", pattern = ".csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE))
list(csv_files)
length(csv_files)
df<-read.csv("./Data/wingspan_vs_mass.csv")
getwd()
head(df)
?head()
head(df,n=5)
#check the length of csv files
length(csv_files)
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv"))
#check the length of csv files
length(csv_files)
df<-read.csv("./Data/wingspan_vs_mass.csv")
head(df)
head(df,n = 5)
b_list <- c(list.files(path = "Data", pattern = "b"))
b_list <- c(list.files(path = "Data", pattern = "^b"))
?list.files()
?list.files()
b_list <- c(list.files(path = "Data", pattern = "^b", all.files = TRUE))
b_list <- c(list.files(path = "Data", pattern = "^b", all.files = TRUE, recursive = TRUE))
for (x in b_list){
head(x, n=1)
}
?readline()
head(b_list)
?list.files()
?head()
?readLines()
for (x in b_list){
?readLines(x,n=1)
}
file.readLines(n=1)
readLines("Data/wingspan_vs_mass.csv)
readLines("Data/wingspan_vs_mass.csv")
readLines("Data/wingspan_vs_mass.csv")
readLines("Data/wingspan_vs_mass.csv",n=1)
file
for (file in b_list){
file
}
print("file")
for (file in b_list){
print(file)
}
for (file in b_list){
print("Data/"file)
for (file in b_list){
print("Data/",file)
}
file <-  "wingspan_vs_mass.csv"
readLines("Data/"file,n=1)
readLines(f"Data/"file,n=1)
readLines("Data/{file}",n=1)
#find (and save) files that start with b
b_list <- c(list.files(path = "Data", pattern = "^b", recursive = TRUE, full.names = TRUE))
for (file in b_list){
readLines(file,n=1)
}
for (file in b_list){
readLines(file,n=1)
}
#for loop to write first lines
for (file_path in b_list){
readLines(file_path,n=1)
}
readLines("Data/",n=1)
file <-  "Data/wingspan_vs_mass.csv"
readLines(file,n=1)
print(file_path)
#for loop to write first lines
for (file_path in b_list){
print(file_path)
#readLines(file_path,n=1)
}
readLines(file_path,n=1)
for (file_path in b_list){
print(file_path)
readLines(file_path,n=1)
}
for (file_path in b_list){
print(file_path)
print(readLines(file_path,n=1))
}
for (file_path in b_list){
print(readLines(file_path,n=1))
}
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE))
print(readLines(file_path,n=1))
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE))
#check the length of csv files
length(csv_files)
head(csv_files)
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE))
#check the length of csv files
length(csv_files)
#save data
df<-read.csv("Data/wingspan_vs_mass.csv")
#check data
head(df,n = 5)
#find (and save) files that start with b
b_list <- c(list.files(path = "Data", pattern = "^b", recursive = TRUE, full.names = TRUE))
?list.files()
#for loop to write first lines
for (file_path in b_list){
print(readLines(file_path,n=1))
}
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE))
#check the length of csv files
length(csv_files)
#save data
df<-read.csv("Data/wingspan_vs_mass.csv")
#check data
head(df,n = 5)
#find (and save) files that start with b
b_list <- c(list.files(path = "Data", pattern = "^b", recursive = TRUE, full.names = TRUE))
?list.files()
#for loop to write first lines
for (file_path in b_list){
print(readLines(file_path,n=1))
}
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE))
#check the length of csv files
length(csv_files)
#save data
df<-read.csv("Data/wingspan_vs_mass.csv")
#check data
head(df,n = 5)
#find (and save) files that start with b
b_list <- c(list.files(path = "Data", pattern = "^b", recursive = TRUE, full.names = TRUE))
?list.files()
#for loop to write first lines
for (file_path in b_list){
print(readLines(file_path,n=1))
}
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE))
#check the length of csv files
length(csv_files)
#save data
df<-read.csv("Data/wingspan_vs_mass.csv")
#check data
head(df,n = 5)
#find (and save) files that start with b
b_list <- c(list.files(path = "Data", pattern = "^b", recursive = TRUE, full.names = TRUE))
?list.files()
#for loop to write first lines
for (file_path in b_list){
print(readLines(file_path,n=1))
}
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
?readLines()
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE))
#check the length of csv files
length(csv_files)
#save data
df<-read.csv("Data/wingspan_vs_mass.csv")
#check data
head(df,n = 5)
#find (and save) files that start with b
b_list <- list.files(path = "Data", pattern = "^b", recursive = TRUE, full.names = TRUE)
?readLines()
#for loop to write first lines
for (file_path in b_list){
print(readLines(file_path,n=1))
}
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
print(readLines(file_path,n=1))
#for loop to write first lines
for (file_path in b_list){
print(readLines(file_path,n=1))
}
x <- 1:10
print(i*2)
for (i in x){
print(i*2)
}
for (i in x){
print(i^2)
}
x^2
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE, recusive=TRUE))
# read csv files into variable
csv_files <- c(list.files(path = "Data", pattern = ".csv",full.names = TRUE, recursive=TRUE))
for (file_path in csv_files){
print(readLines(file_path,n=1))
}
10/3 # Can you figure out this one? ;)
bob = 3+4 # This assigns the evaluated function (3 + 4) to an object (like a variable) called "bob"
# bob should equal 7
jane <- 5*2 # This assigns the value of 5 times 2 to an object called "jane" - Either symbol works
# R can process a host of logical evaluations.  For example we can ask whether bob or jane is greater...
bob > jane # This gives us the value "FALSE" - bob is 7, jane is 10
bob < jane # This gives the value "TRUE"
bob %in% c(1,2,3,4,5,6,7)
c(1,2,3,4,5,6,7) %in% bob
bob >= jane
bob == jane
jane == 10
(jane == 10) + 1   #!???
# One way to manually enter data is with the command c()
# That stands for "concatenate" and allows you to enter a series of values to be saved to a single object:
billy = c(2,3,4,5,6) # "billy" is now a NUMERIC VECTOR of 5 values
# c() requires you to separate the various elements with a comma
is.vector(billy)
# This works for STRINGS as well. Strings are made up of characters
suzy = c("This","is","a","character","vector") # notice how each string is enclosed in quotes. That tells R it is a string
billy[1] # The brackets [] allow you to pick one or more elements from an object.  Here, we asked for the first element
# What value would billy[3] give you?
tommy <- c(1,2,3,4,5)
billy + tommy
billy[1] # The brackets [] allow you to pick one or more elements from an object.  Here, we asked for the first element
billy[1][3] # The brackets [] allow you to pick one or more elements from an object.  Here, we asked for the first element
billy[c(1,3)] # The brackets [] allow you to pick one or more elements from an object.  Here, we asked for the first element
suzy[4:]
suzy[4:5]
observation = c(1,2,3,4,5,6,7,8,9,10) # our vector of observations from a reeated experiment
wingspan = c(1.2,1.4,1.0,1.2,1.8,2.0,2.2,1.1,2.3,2.0) # our vector of wingspans
mass = c(0.43,0.44,0.32,0.44,0.52,0.55,0.56,0.42,0.51,0.57) # our vector of mass
cbind(observation,wingspan,mass) # this will show us our matrix, but we want to assign it to an object!
data = cbind(observation,wingspan,mass) # assigned to an object called "data"
data
data[1,3]
View(data)
View(data)
data[1,3]
data[1,3] + data[2,3] + data[3,3] + data[4,3] + data[5,3]
data[,3] # This gives you ALL rows, but only column 3
data[3,] # This gives you ONLY row 3, but all columns
sum(data[1:5,3]) # All you have to do is enclose that in the "sum" function!
?iris
iris[1,]
View(iris)
iris[,Petal.Width]
iris$Petal.Width
mean(iris$Petal.Width)
summery(iris$Petal.Width)
summary(iris$Petal.Width)
area = c(iris$Petal.Length*iris$Petal.Width])
area = c(iris$Petal.Length*iris$Petal.Width)
area
iris$Petal.Area = c(iris$Petal.Length*iris$Petal.Width)
iris$Petal.Area = iris$Petal.Length*iris$Petal.Width
letters # built-in pre-made vector of a - z
vector1 <- c(1,2,3,4,5,6,7,8,9,10)
vector2 <- c(5,6,7,8,4,3,2,1,3,10)
vector3 <- letters # letters and LETTERS are built-in vectors
vector1 + 5
vector2 / 2
vector1*vector2
vector3 + 1 # can't add 1 to "a"
dat <- iris # can rename the object to be easier to type if you want
dat <- iris # can rename the object to be easier to type if you want
seq(2,150,2) # here's the code to get a list of the even numbers between 2 and 150
