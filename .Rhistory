pivot_longer_multiple <- function(df,patterns,exclude = NA){
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~paste0("xzy",i), exclude[i])
}
}
tempdf <- list()
for(i in 1:length(patterns)){
tempdf[[i]] <- df %>%
select(-contains(patterns[patterns != patterns[i]])) %>%
pivot_longer(contains(patterns[i]),values_to = patterns[i],names_to = "names") %>%
mutate(names = str_remove(names,patterns[i]))
}
df <- Reduce(full_join, tempdf)
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~exclude[i], paste0("xzy",i))
}
}
return(df)
}
test <- pivot_longer_multiple(df,c("mass","wing","tarsus","tail","bill"),"egg_mass")
df <- read_csv("./Data/Bird_Measurements.csv") %>% clean_names()
df <- df %>% select(-ends_with("_n"))
test <- pivot_longer_multiple(df,c("mass","wing","tarsus","tail","bill"),"egg_mass")
pivot_longer_multiple <- function(df,patterns,exclude = NA){
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~paste0("xzy",i), exclude[i])
}
}
tempdf <- list()
for(i in 1:length(patterns)){
tempdf[[i]] <- df %>%
select(-contains(patterns[patterns != patterns[i]])) %>%
pivot_longer(contains(patterns[i]),values_to = patterns[i],names_to = "names") %>%
mutate(names = str_remove(names,patterns[i]))
}
df <- Reduce(full_join, tempdf)
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~exclude[i], paste0("xzy",i))
}
}
return(df)
}
test <- pivot_longer_multiple(df,c("mass","wing","tarsus","tail","bill"),"egg_mass")
source("~/Desktop/Data_Course_ROGERS/Code_Examples/clean_the_bp_data.R", echo=TRUE)
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
library(tidyverse)
clean_names
fix_names <- function(df,pattern,exclude = NA){
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~paste0("xzy",i), exclude[i])
}
}
for(name in pattern){
tempvec <- names(df)[contains(name)]
for(i in 1:length(tempvec)){
df <- df %>% rename_with(~paste0(name,i), tempvec[i])
}
}
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~exclude[i], paste0("xzy",i))
}
}
}
pivot_longer_multiple <- function(df,patterns,exclude = NA){
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~paste0("xzy",i), exclude[i])
}
}
tempdf <- list()
for(i in 1:length(patterns)){
tempdf[[i]] <- df %>%
select(-contains(patterns[patterns != patterns[i]])) %>%
pivot_longer(contains(patterns[i]),values_to = patterns[i],names_to = "names") %>%
mutate(names = str_remove(names,patterns[i]))
}
df <- Reduce(full_join, tempdf)
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~exclude[i], paste0("xzy",i))
}
}
return(df)
}
df <- df %>% fix_names(c("bp","hr"))
pattern <- c("hr","bp")
for(name in pattern){
tempvec <- names(df)[names(df) %in% name]
for(i in 1:length(tempvec)){
df <- df %>% rename_with(~paste0(name,i), tempvec[i])
}
}
read_xlsx
read_csv
grepl(name,names(df))
subset(names(df), grepl(name,names(df)))
tempvec <- subset(names(df), grepl(name,names(df)))
for(i in 1:length(tempvec)){
df <- df %>% rename_with(~paste0(name,i), tempvec[i])
}
fix_names <- function(df,pattern,exclude = NA){
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~paste0("xzy",i), exclude[i])
}
}
for(name in pattern){
tempvec <- subset(names(df), grepl(name,names(df)))
for(i in 1:length(tempvec)){
df <- df %>% rename_with(~paste0(name,i), tempvec[i])
}
}
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~exclude[i], paste0("xzy",i))
}
}
}
df <- df %>% fix_names(c("bp","hr"))
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
df <- df %>% fix_names(c("bp","hr"))
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
df <- df %>% fix_names(c("bp","hr"))
fix_names <- function(df,pattern,exclude = NA){
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~paste0("xzy",i), exclude[i])
}
}
for(name in pattern){
tempvec <- subset(names(df), grepl(name,names(df)))
for(i in 1:length(tempvec)){
df <- df %>% rename_with(~paste0(name,i), tempvec[i])
}
}
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~exclude[i], paste0("xzy",i))
}
}
return(df)
}
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
df <- df %>% fix_names(c("bp","hr"))
# dffull <- dfbp %>% mutate(heart_rate = dfhr$heart_rate)
# dffull <- dffull %>%  separate(blood_pressure, into = c("systolic","diastolic"),convert = TRUE)
#
# dffull <- dffull %>% mutate(birthdate = as.POSIXct(paste(year_birth,month_of_birth,day_birth,sep="-")))
#
# dffull <- dffull %>%  mutate(race = case_when(race == "WHITE"~ "White",
#                                     race == "Caucasian"~"White",
#                                     TRUE~race))
#
# saveRDS(dffull,"./Code_Examples/cleaned_bp.rds")
test <- df %>% pivot_longer_multiple(c("bp","hr"))
test %>% rename(visit = names)
test %>% rename(visit = names) %>%
mutate(visit = visits[visit])
visits <- read_xlsx("./Data/messy_bp.xlsx", skip = 2,n_max = 0) %>% select(-starts_with("...")) %>% names()
test %>% rename(visit = names) %>%
mutate(visit = visits[visit])
test %>% rename(visit = names) %>%
mutate(visit = visits[as.numeric(visit)])
df <- read_csv("./Data/Bird_Measurements.csv") %>% clean_names()
df <- read_csv("./Data/Bird_Measurements.csv") %>% clean_names()
df <- df %>% select(-ends_with("_n"))
df <- df %>% fix_names(c("mass","tail","wing","tarsus","bill"), "egg_mass")
df <- read_csv("./Data/Bird_Measurements.csv") %>% clean_names()
df <- df %>% select(-ends_with("_n"))
df <- df %>% fix_names(c("mass","tail","wing","tarsus","bill"), "egg_mass")
test <- pivot_longer_multiple(df,c("mass","wing","tarsus","tail","bill"),"egg_mass")
goal <- read.csv("./Data/cleaned_bird_data.csv") %>% clean_names()
test <- test %>% mutate(gender = case_when(names == "1" ~ "Male",
names == "2" ~ "Female",
names == "3" ~ "Unsexed"))
test == goal
test <- test %>% mutate(gender = case_when(names == "1" ~ "Male",
names == "2" ~ "Female",
names == "3" ~ "Unsexed")) %>%
select(-names)
test == goal
observed <- c(122,6,4,124)
observed <- c(122,6,4,124)
expected <- c(64,64,64,64)
oe <- observed-expected
oe2 <- oe*oe
chi <- sum(oe./expected)
chi <- sum(oe2/expected)
10/2556
10/256
6/170
784+790+149+144+68+70+3+6
68+70+3+6
149+144+3+6
147/2014
302/2014
147/2014 + 302/2014
a<- 147/2014 + 302/2014
a*2014
a<- 147/2014 * 302/2014
a*2014
9/22
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
pivot_longer_multiple <- function(df,patterns,exclude = NA, fix_names = FALSE){
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~paste0("xzy",i), exclude[i])
}
}
if(fix_names == TRUE){
for(name in patterns){
tempvec <- subset(names(df), grepl(name,names(df)))
for(i in 1:length(tempvec)){
df <- df %>% rename_with(~paste0(name,i), tempvec[i])
}
}
}
tempdf <- list()
for(i in 1:length(patterns)){
tempdf[[i]] <- df %>%
select(-contains(patterns[patterns != patterns[i]])) %>%
pivot_longer(contains(patterns[i]),values_to = patterns[i],names_to = "names") %>%
mutate(names = str_remove(names,patterns[i]))
}
df <- Reduce(full_join, tempdf)
if(is.na(exclude)==FALSE){
for (i in 1:length(exclude)) {
df <- df %>% rename_with(~exclude[i], paste0("xzy",i))
}
}
return(df)
}
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
# dffull <- dfbp %>% mutate(heart_rate = dfhr$heart_rate)
# dffull <- dffull %>%  separate(blood_pressure, into = c("systolic","diastolic"),convert = TRUE)
#
# dffull <- dffull %>% mutate(birthdate = as.POSIXct(paste(year_birth,month_of_birth,day_birth,sep="-")))
#
# dffull <- dffull %>%  mutate(race = case_when(race == "WHITE"~ "White",
#                                     race == "Caucasian"~"White",
#                                     TRUE~race))
#
# saveRDS(dffull,"./Code_Examples/cleaned_bp.rds")
test <- df %>% pivot_longer_multiple(c("bp","hr"),fix_names = TRUE)
test %>% rename(visit = names) %>%
mutate(visit = visits[as.numeric(visit)])
library(tidyverse)
library(janitor)
library(readxl)
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
visits <- read_xlsx("./Data/messy_bp.xlsx", skip = 2,n_max = 0) %>% select(-starts_with("...")) %>% names()
# dfbp <- df %>% select(-starts_with("HR")) %>% pivot_longer(cols =starts_with("bp"), values_to = "blood_pressure",names_to = "visit")
# dfhr <- df %>% select(-starts_with("bp")) %>% pivot_longer(cols =starts_with("hr"), values_to = "heart_rate",names_to = "visit")
# dfbp <- dfbp %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-6)/2])
# dfhr <- dfhr %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-7)/2])
# dffull <- dfbp %>% mutate(heart_rate = dfhr$heart_rate)
# dffull <- dffull %>%  separate(blood_pressure, into = c("systolic","diastolic"),convert = TRUE)
#
# dffull <- dffull %>% mutate(birthdate = as.POSIXct(paste(year_birth,month_of_birth,day_birth,sep="-")))
#
# dffull <- dffull %>%  mutate(race = case_when(race == "WHITE"~ "White",
#                                     race == "Caucasian"~"White",
#                                     TRUE~race))
#
# saveRDS(dffull,"./Code_Examples/cleaned_bp.rds")
test <- df %>% pivot_longer_multiple(c("bp","hr"),fix_names = TRUE)
test %>% rename(visit = names) %>%
mutate(visit = visits[as.numeric(visit)])
library(tidyverse)
library(janitor)
library(readxl)
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
visits <- read_xlsx("./Data/messy_bp.xlsx", skip = 2,n_max = 0) %>% select(-starts_with("...")) %>% names()
# dfbp <- df %>% select(-starts_with("HR")) %>% pivot_longer(cols =starts_with("bp"), values_to = "blood_pressure",names_to = "visit")
# dfhr <- df %>% select(-starts_with("bp")) %>% pivot_longer(cols =starts_with("hr"), values_to = "heart_rate",names_to = "visit")
# dfbp <- dfbp %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-6)/2])
# dfhr <- dfhr %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-7)/2])
# dffull <- dfbp %>% mutate(heart_rate = dfhr$heart_rate)
# dffull <- dffull %>%  separate(blood_pressure, into = c("systolic","diastolic"),convert = TRUE)
#
# dffull <- dffull %>% mutate(birthdate = as.POSIXct(paste(year_birth,month_of_birth,day_birth,sep="-")))
#
# dffull <- dffull %>%  mutate(race = case_when(race == "WHITE"~ "White",
#                                     race == "Caucasian"~"White",
#                                     TRUE~race))
#
# saveRDS(dffull,"./Code_Examples/cleaned_bp.rds")
test <- df %>% pivot_longer_multiple(c("bp","hr"),fix_names = TRUE)
library(tidyverse)
library(janitor)
library(readxl)
source("./Code_Examples/pivot_multiple.R")
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
visits <- read_xlsx("./Data/messy_bp.xlsx", skip = 2,n_max = 0) %>% select(-starts_with("...")) %>% names()
# dfbp <- df %>% select(-starts_with("HR")) %>% pivot_longer(cols =starts_with("bp"), values_to = "blood_pressure",names_to = "visit")
# dfhr <- df %>% select(-starts_with("bp")) %>% pivot_longer(cols =starts_with("hr"), values_to = "heart_rate",names_to = "visit")
# dfbp <- dfbp %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-6)/2])
# dfhr <- dfhr %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-7)/2])
# dffull <- dfbp %>% mutate(heart_rate = dfhr$heart_rate)
# dffull <- dffull %>%  separate(blood_pressure, into = c("systolic","diastolic"),convert = TRUE)
#
# dffull <- dffull %>% mutate(birthdate = as.POSIXct(paste(year_birth,month_of_birth,day_birth,sep="-")))
#
# dffull <- dffull %>%  mutate(race = case_when(race == "WHITE"~ "White",
#                                     race == "Caucasian"~"White",
#                                     TRUE~race))
#
# saveRDS(dffull,"./Code_Examples/cleaned_bp.rds")
test <- df %>% pivot_longer_multiple(c("bp","hr"),fix_names = TRUE)
library(tidyverse)
library(janitor)
library(readxl)
source("./Code_Examples/pivot_multiple.R")
df <- read_xlsx("./Data/messy_bp.xlsx", skip=3) %>% clean_names()
visits <- read_xlsx("./Data/messy_bp.xlsx", skip = 2,n_max = 0) %>% select(-starts_with("...")) %>% names()
# dfbp <- df %>% select(-starts_with("HR")) %>% pivot_longer(cols =starts_with("bp"), values_to = "blood_pressure",names_to = "visit")
# dfhr <- df %>% select(-starts_with("bp")) %>% pivot_longer(cols =starts_with("hr"), values_to = "heart_rate",names_to = "visit")
# dfbp <- dfbp %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-6)/2])
# dfhr <- dfhr %>% mutate(visit = visits[(as.numeric(str_remove(visit, "bp_"))-7)/2])
# dffull <- dfbp %>% mutate(heart_rate = dfhr$heart_rate)
# dffull <- dffull %>%  separate(blood_pressure, into = c("systolic","diastolic"),convert = TRUE)
#
# dffull <- dffull %>% mutate(birthdate = as.POSIXct(paste(year_birth,month_of_birth,day_birth,sep="-")))
#
# dffull <- dffull %>%  mutate(race = case_when(race == "WHITE"~ "White",
#                                     race == "Caucasian"~"White",
#                                     TRUE~race))
#
# saveRDS(dffull,"./Code_Examples/cleaned_bp.rds")
test <- df %>% pivot_longer_multiple(c("bp","hr"),fix_names = TRUE)
test %>% rename(visit = names) %>%
mutate(visit = visits[as.numeric(visit)])
# dffull <- dfbp %>% mutate(heart_rate = dfhr$heart_rate)
# dffull <- dffull %>%  separate(blood_pressure, into = c("systolic","diastolic"),convert = TRUE)
#
# dffull <- dffull %>% mutate(birthdate = as.POSIXct(paste(year_birth,month_of_birth,day_birth,sep="-")))
#
# dffull <- dffull %>%  mutate(race = case_when(race == "WHITE"~ "White",
#                                     race == "Caucasian"~"White",
#                                     TRUE~race))
#
# saveRDS(dffull,"./Code_Examples/cleaned_bp.rds")
test <- df %>% pivot_longer_multiple(c("bp","hr"),fix_names = TRUE) %>% rename(visit = names) %>%
mutate(visit = visits[as.numeric(visit)])
library(tidyverse)
library(readxl)
library(janitor)
source("./Code_Examples/pivot_multiple.R")
goal <- read.csv("./Data/cleaned_bird_data.csv") %>% clean_names()
df <- read_csv("./Data/Bird_Measurements.csv") %>% clean_names()
df <- df %>% select(-ends_with("_n"))
pattern <- c("hr","bp")
test <- pivot_longer_multiple(df,c("mass","wing","tarsus","tail","bill"),"egg_mass")
test <- test %>% mutate(gender = case_when(names == "m_" ~ "Male",
names == "f_" ~ "Female",
names == "unsexed_" ~ "Unsexed")) %>%
select(-names)
library(tidyverse)
library(readxl)
library(janitor)
source("./Code_Examples/pivot_multiple.R")
goal <- read.csv("./Data/cleaned_bird_data.csv") %>% clean_names()
df <- read_csv("./Data/Bird_Measurements.csv") %>% clean_names()
df <- df %>% select(-ends_with("_n"))
test <- pivot_longer_multiple(df,c("mass","wing","tarsus","tail","bill"),"egg_mass")
test <- test %>% mutate(gender = case_when(names == "m_" ~ "Male",
names == "f_" ~ "Female",
names == "unsexed_" ~ "Unsexed")) %>%
select(-names)
order(test)
arrange(test,family)
tail(arrange(test,family))
arrange(test,family) == arrange(goal,family)
m6 <- glm(data=grad,formula=admit~gre*gpa*rank,family = "binomial"
add_predictions(grad,m6,type = "response") %>%
m6 <- glm(data=grad,formula=admit~gre*gpa*rank,family = "binomial")
library(modelr)
library(tidyverse)
library(palmerpenguins)
library(easystats)
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species))+
geom_point()+
geom_smooth(method="lm",aes(linetype = sex),se=FALSE)
coord_cartesian(xlim = c(0,60))
#make linear regresssion of this plot
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm))+
stat_smooth(method = "lm")
aov(data = penguins,bill_depth_mm~bill_length_mm) %>% summary()
m1 <- glm(data = penguins,bill_depth_mm~bill_length_mm)
m2 <- glm(data = penguins,bill_depth_mm~bill_length_mm+species)
m3 <- glm(data = penguins,bill_depth_mm~bill_length_mm*species)
m1$aic
m2$aic
m3$aic
compare_performance(m1,m2,m3,m4)
library(tidyverse)
library(palmerpenguins)
library(easystats)
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species))+
geom_point()+
geom_smooth(method="lm",aes(linetype = sex),se=FALSE)
coord_cartesian(xlim = c(0,60))
#make linear regresssion of this plot
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm))+
stat_smooth(method = "lm")
aov(data = penguins,bill_depth_mm~bill_length_mm) %>% summary()
m1 <- glm(data = penguins,bill_depth_mm~bill_length_mm)
m2 <- glm(data = penguins,bill_depth_mm~bill_length_mm+species)
m3 <- glm(data = penguins,bill_depth_mm~bill_length_mm*species)
m1$aic
m2$aic
m3$aic
compare_performance(m1,m2,m3)
names(penguins)
m4 <- glm(data = penguins,formula = bill_depth_mm~bill_length_mm+species+sex+islands)
#logistic regression
Titanic %>% as.data.frame()
grad<- read_csv("./Data/GradSchool_Admissions.csv")
#logistic -> family=binomial
grad <- grad %>% mutate(admit = as.logical(admit))
m6 <- glm(data=grad,formula=admit~gre*gpa*rank,family = "binomial")
summary(m6)
m7 <- glm(data=grad,formula=admit~gre+gpa+rank,family = "binomial")
compare_performance(m6,m7)
compare_performance(m6,m7) %>% plot
library(MASS)
step<- stepAIC(m6)
step$formula
compare_performance(m6,m7,step) %>% plot
mod_best <- glm(data=grad,family = "binomial", formula = step$formula)
names(mod_best)
names(step)
penguin %>% names
penguins %>% names
peng_mod <- glm(data=penguins, formula = bill_length_mm ~ island*species*bill_depth_mm*body_mass_g*sex*year )
peng_step <- stepAIC(peng_mod)
peng_mod_best <- glm(data=penguins,formula = peng_step$formula)
peng_step$formula
peng_mod <- glm(data=penguins, formula = bill_length_mm ~ island*species*bill_depth_mm*body_mass_g*sex*year*flipper_length_mm )
peng_step <- stepAIC(peng_mod)
peng_mod_best <- glm(data=penguins,formula = peng_step$formula)
peng_step$formula
peng_mod_best$formula
peng_mod <- glm(data=penguins, formula = bill_length_mm ~ .^2 )
peng_step <- stepAIC(peng_mod,)
peng_mod_best <- glm(data=penguins,formula = peng_step$formula)
peng_mod_best$formula
peng_mod_best == peng_step
names(peng_step)
names(peng_mod_best)
peng_step$anova
dim(penguins)
peng_new <- penguins[.8]
rbino(10,1,.5)
rbinom(10,1,.5)
penguins %>%
mutate(newcol = rbinom(nrow(penguins),1,.8))
penguins <-
penguins %>%
mutate(newcol = rbinom(nrow(penguins),1,.8))
test <- penguins %>% filter(newcol==0)
train <- penguins %>% filter(newcol==1)
peng_mod <- glm(data=train, formula = bill_length_mm ~ .^2 )
peng_step <- stepAIC(peng_mod,)
peng_mod_best <- glm(data=train,formula = peng_step$formula)
peng_mod_best$formula
#test model on test set
predictions <-
add_predictions(test, peng_mod_best)
predictions
predictions %>% mutate(resid= abs(pred-bill_length_mm))
predictions <-
predictions %>% mutate(resid= abs(pred-bill_length_mm))
mean(predictions$resid,na.rm = TRUE)
mean_error <- mean(predictions$resid,na.rm = TRUE)
install.packages("ranger")
install.packages("RcppEigen")
install.packages("ranger")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
path <- "./Data/Soil_Predators.csv"
df <- read_csv(path)
df <- read_csv(path) %>% clean_names
df <- read_csv(path) %>% clean_names()
badcolnames <- read_lines(path, n=1)
badcolnames <- badcolnames %>% str_replace_all(",_","_")
badcolnames <- badcolnames %>% str_replace_all(",_","_") %>% str_split(",") %>% unlist()
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)
df <- df %>% select(-c(X25,X26))
names(df) <- badcolnames
path <- "./Data/Soil_Predators.csv"
df <- read_csv(path,col_names = FALSE)
df <- read_csv(path,col_names = FALSE)
badcolnames <- read_lines(path, n=1)
names(df) <- badcolnames
badcolnames <- badcolnames %>% str_replace_all(",_","_") %>% str_split(",") %>% unlist()
badcolnames <- read_lines(path, n=1)
badcolnames <- readLines(path, n=1)
badcolnames <- badcolnames %>% str_replace_all(",_","_") %>% str_split(",") %>% unlist()
df <- df %>% select(-c(X25,X26))
names(df) <- badcolnames
df$Predator_species %>% unique
